const baseUrl = "http://localhost:80/api/regions";

document.addEventListener("DOMContentLoaded", () => {
    let regionName = "global"; // Default region
    startAutoRefresh(regionName);

    fetchSummary(regionName);
    fetchDetails(regionName);

    document.querySelectorAll(".region-button").forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
            startAutoRefresh(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});

let refreshInterval = 300000; // 5 minutes (300,000 ms)

async function fetchData(regionName) {
    try {
        const [summaryResponse, detailsResponse] = await Promise.all([
            fetch(`${baseUrl}/summary/${regionName}`),
            fetch(`${baseUrl}/details/${regionName}`)
        ]);

        const summary = await summaryResponse.json();
        const details = await detailsResponse.json();

        updateSummary(summary);
        updateDetails(details);
    } catch (error) {
        console.error("Error fetching data:", error);
    }
}

function startAutoRefresh(regionName) {
    fetchData(regionName);

    setInterval(() => {
        fetchData(regionName);
    }, refreshInterval);
}

async function fetchSummary(regionName) {
    try {
        const response = await fetch(`${baseUrl}/summary/${regionName}`);
        const summary = await response.json();
        updateSummary(summary);
    } catch (error) {
        console.error("Error fetching summary:", error);
    }
}

async function fetchDetails(regionName) {
    try {
        const response = await fetch(`${baseUrl}/details/${regionName}`);
        const details = await response.json();
        
        updateDetails(details); // Use async rendering
        setInterval(() => pingAllDevices(details), 10000); // Ping devices every 10 seconds
    } catch (error) {
        console.error("Error fetching details:", error);
    }
}

async function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    detailsContainer.innerHTML = ""; // Clear previous data

    try {
        const liveStatusResponse = await fetch("http://localhost:80/api/devices/status");
        const realTimeStatus = await liveStatusResponse.json();

        // Load data in **small chunks** to avoid UI lag
        Object.entries(data.details).forEach(([key, devices]) => {
            if (!Array.isArray(devices) || devices.length === 0) return;

            setTimeout(() => { // Async rendering for better performance
                devices.forEach((device) => {
                    const deviceIP = device.ip_address || "N/A";
                    const currentStatus = realTimeStatus[deviceIP] || device.status;

                    const card = document.createElement("div");
                    card.className = "device-card";
                    card.dataset.type = key.toLowerCase();
                    card.dataset.status = currentStatus.toLowerCase();

                    const statusDot = document.createElement("span");
                    statusDot.className = "status-dot";
                    statusDot.style.backgroundColor = currentStatus === "Online" ? "green" : "red";

                    card.innerHTML = `
                        <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                        <p>DEVICE TYPE: ${key.toUpperCase()}</p>
                        <p>IP: ${deviceIP}</p>
                        <p>LOCATION: ${device.location || "N/A"}</p>
                        <p>Status: ${currentStatus} ${statusDot.outerHTML}</p>
                        <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${deviceIP}', '${device.location || "N/A"}', '${currentStatus}')">Details</button>
                    `;

                    detailsContainer.appendChild(card);
                });
            }, 0); // Async rendering (non-blocking UI)
        });
    } catch (error) {
        console.error("Error fetching real-time device status:", error);
        detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
    }
}

async function pingAllDevices(details) {
    const devicesToPing = [];

    Object.values(details.details).forEach((devices) => {
        if (!Array.isArray(devices) || devices.length === 0) return;

        devices.forEach((device) => {
            if (device.status === "Offline") {
                devicesToPing.push(device.ip_address);
            }
        });
    });

    if (devicesToPing.length > 0) {
        try {
            const response = await fetch(`${baseUrl}/ping/batch`, {
                method: "POST",
                headers: { "Content-Type": "application/json" },
                body: JSON.stringify({ ips: devicesToPing })
            });

            const statusData = await response.json();
            
            statusData.forEach(({ ip, status }) => {
                const card = document.querySelector(`[data-ip="${ip}"]`);
                if (!card) return;

                const statusDot = card.querySelector(".status-dot");
                const statusText = card.querySelector(".device-status");

                if (status.toLowerCase() === "online") {
                    statusDot.style.backgroundColor = "green";
                    statusText.textContent = "Online";
                    card.dataset.status = "online";
                } else {
                    statusDot.style.backgroundColor = "red";
                    statusText.textContent = "Offline";
                    card.dataset.status = "offline";
                }
            });
        } catch (error) {
            console.error("Ping batch request failed:", error);
        }
    }
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";

    ["camera", "archiver", "controller", "server"].forEach(type => {
        document.getElementById(`${type}-total`).textContent = data.summary?.[`${type}s`]?.total || "N/A";
        document.getElementById(`${type}-online`).textContent = data.summary?.[`${type}s`]?.online || "N/A";
        document.getElementById(`${type}-offline`).textContent = data.summary?.[`${type}s`]?.offline || "N/A";
    });
}

function showModal(name, ip, location, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Location:</strong> ${location}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";

    document.getElementById("modal").addEventListener("click", (event) => {
        if (event.target === document.getElementById("modal")) {
            document.getElementById("modal").style.display = "none";
        }
    });
}















require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const regionRoutes = require("./routes/regionRoutes");
const ping = require("ping");
const pLimit = require("p-limit");

const app = express();
const PORT = process.env.PORT || 80;

const { fetchAllIpAddress } = require("./services/excelService");

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5501",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;
  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.status(500).json({ error: "Error pinging device", details: error.message });
  }
});

// Store device status
let deviceStatus = {};

// Function to ping all devices concurrently
const pingDevices = async () => {
  try {
    const devices = fetchAllIpAddress(); // Fetch dynamically in case the list updates
    const limit = pLimit(10); // Limit concurrent pings to 10 at a time

    const pingPromises = devices.map((ip) =>
      limit(async () => {
        try {
          const result = await ping.promise.probe(ip);
          deviceStatus[ip] = result.alive ? "Online" : "Offline";
        } catch (error) {
          console.error(`Error pinging ${ip}:`, error);
          deviceStatus[ip] = "Offline";
        }
      })
    );

    await Promise.all(pingPromises);
    console.log("Updated device status:", deviceStatus);
  } catch (error) {
    console.error("Error in pingDevices function:", error);
  }
};

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// Get real-time status of all devices
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error("Server Error:", err.stack);
  res.status(500).json({ error: "Something went wrong!", details: err.message });
});

// Start Server
app.listen(PORT, async () => {
  console.log(`Server running on http://localhost:${PORT}`);
  await pingDevices(); // Initial ping on startup
});









const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
const pLimit = require("p-limit");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data (with TTL)
let allData = {};
const cache = new Map();
const CACHE_TTL = 5 * 60 * 1000; // Cache ping results for 5 minutes

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data dynamically
const loadExcelData = () => {
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    allData = {
        archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
        controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
        cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
        servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
    };
};

// Function to get all device IPs
const fetchAllIpAddress = () => {
    if (Object.keys(allData).length === 0) loadExcelData();

    const devices = [
        ...allData.cameras,
        ...allData.archivers,
        ...allData.controllers,
        ...allData.servers,
    ];

    // Extract valid IP addresses
    return devices
        .map((device) => device.ip_address)
        .filter((ip) => ip && typeof ip === "string");
};

// Function to fetch global data
const fetchGlobalData = async () => {
    if (Object.keys(allData).length === 0) loadExcelData();

    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping devices before returning data
    await pingDevices(devices);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to fetch region-specific data
const fetchRegionData = async (regionName) => {
    if (Object.keys(allData).length === 0) loadExcelData();

    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping devices before returning data
    await pingDevices(devices);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to calculate the summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

// Function to ping all devices concurrently
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Limit concurrent pings to 10 at a time
    const allDevices = [...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers];

    const pingPromises = allDevices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (!ipAddress) {
                device.status = "IP Address Missing";
                return;
            }

            const cachedStatus = cache.get(ipAddress);
            if (cachedStatus && Date.now() - cachedStatus.timestamp < CACHE_TTL) {
                device.status = cachedStatus.status;
            } else {
                const status = await pingDevice(ipAddress);
                device.status = status;
                cache.set(ipAddress, { status, timestamp: Date.now() });
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Initial data load
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };









app.js

require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const regionRoutes = require("./routes/regionRoutes");
const ping = require("ping"); // Import the ping module

const app = express();
const PORT = process.env.PORT || 80;

const { fetchAllIpAddress } = require("./services/excelService");

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5501", // Match your frontend's origin
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;
  
  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Function to continuously ping all devices
const devices = fetchAllIpAddress();
let deviceStatus = {};

async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      deviceStatus[ip] = result.alive ? "Online" : "Offline";
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// Get real-time status of all devices
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Start pinging devices immediately
});




excelservice.js

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};

// Function to compute global summary and details
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers]
    //console.log("Hi ", merged)
    addresses =  merged.map(myfunc)
    console.log(addresses)
    return addresses
    
}
const myfunc= (x) => {
    return x.ip_address
}

const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };






regionRoutes.js

const express = require("express");
const {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
} = require("../controllers/regionControllers");

const router = express.Router();

// Global Routes
router.get("/summary/global", getGlobalSummary);
router.get("/details/global", getGlobalDetails);

// Region Routes
router.get("/summary/:regionName", getRegionSummary);
router.get("/details/:regionName", getRegionDetails);

module.exports = router;



regionController.js


const { fetchGlobalData, fetchRegionData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
    
};






