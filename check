
import express from 'express';
import bodyParser from 'body-parser';
import { fetchGlobalData, fetchRegionData } from './services/excelService.js';

const app = express();
const PORT = 3000;

app.use(bodyParser.json());

// Global summary API
app.get('/api/regions/summary/global', async (req, res) => {
    try {
        const data = await fetchGlobalData();
        res.json(data.summary);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

// Region details API
app.get('/api/regions/details/:region', async (req, res) => {
    const includeStatus = req.query.includeStatus === 'true';
    const { region } = req.params;

    try {
        const data = await fetchRegionData(region, includeStatus);
        res.json(data.details);
    } catch (error) {
        res.status(500).json({ error: error.message });
    }
});

app.listen(PORT, () => {
    console.log(`Server running on http://localhost:${PORT}`);
});













import xlsx from 'xlsx';
import path from 'path';
import ping from 'ping';
import pLimit from 'p-limit';

const DATA_PATH = path.join('C:/Users/W0024618/Desktop/Backend/src/data');
const limit = pLimit(10); // Limit concurrent tasks

// Cache settings
let cachedData = null;
let cacheTimestamp = null;
const CACHE_DURATION = 5 * 60 * 1000; // Cache for 5 minutes

// Load data from Excel files
const loadExcelData = () => {
    const loadSheet = (fileName, sheetIndex = 0) => {
        const filePath = path.join(DATA_PATH, fileName);
        try {
            const workbook = xlsx.readFile(filePath);
            const sheetName = workbook.SheetNames[sheetIndex];
            const data = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);
            console.log(`Loaded data from ${fileName}:`, data); // Debug: log loaded data
            return data;
        } catch (error) {
            console.error(`Error loading file ${fileName}:`, error.message);
            return [];
        }
    };

    return {
        archivers: loadSheet('ArchiverData.xlsx'),
        cameras: loadSheet('CameraData.xlsx'),
        controllers: loadSheet('ControllerData.xlsx'),
        servers: loadSheet('ServerData.xlsx'),
    };
};

const excelData = loadExcelData();

// Calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === 'Online').length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

// Ping devices in batches
const pingDevices = async (devices, batchSize = 10) => {
    for (let i = 0; i < devices.length; i += batchSize) {
        const batch = devices.slice(i, i + batchSize);
        const pingPromises = batch.map(device =>
            limit(() => pingDevice(device.ip_address)
                .then(status => device.status = status || 'IP Address Missing'))
        );
        await Promise.all(pingPromises);
    }
};

// Ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? 'Online' : 'Offline');
        });
    });
};

// Fetch global data with caching
const fetchGlobalData = async () => {
    const now = Date.now();

    if (cachedData && now - cacheTimestamp < CACHE_DURATION) {
        return cachedData; // Return cached data
    }

    const { archivers, cameras, controllers, servers } = excelData;

    // Debug: Log loaded data before processing
    console.log('Archivers:', archivers);
    console.log('Cameras:', cameras);
    console.log('Controllers:', controllers);
    console.log('Servers:', servers);

    // Ping all devices
    await Promise.all([
        pingDevices(archivers),
        pingDevices(cameras),
        pingDevices(controllers),
        pingDevices(servers),
    ]);

    const summary = calculateSummary({
        Archivers: archivers,
        Cameras: cameras,
        Controllers: controllers,
        Servers: servers,
    });

    cachedData = { summary, details: { Archivers: archivers, Cameras: cameras, Controllers: controllers, Servers: servers } };
    cacheTimestamp = now;
    return cachedData;
};

// Fetch region-specific data
const fetchRegionData = async (region, includeStatus = false) => {
    console.log(`Fetching data for region: ${region}`); // Debug log
    const regionArchivers = excelData.archivers.filter(device => device.Location === region);
    const regionCameras = excelData.cameras.filter(device => device.Location === region);
    const regionControllers = excelData.controllers.filter(device => device.Location === region);
    const regionServers = excelData.servers.filter(device => device.Location === region);

    // Debug: Log filtered data
    console.log(`Archivers for region ${region}:`, regionArchivers);
    console.log(`Cameras for region ${region}:`, regionCameras);
    console.log(`Controllers for region ${region}:`, regionControllers);
    console.log(`Servers for region ${region}:`, regionServers);

    if (includeStatus) {
        await Promise.all([
            pingDevices(regionArchivers),
            pingDevices(regionCameras),
            pingDevices(regionControllers),
            pingDevices(regionServers),
        ]);
    }

    const summary = calculateSummary({
        Archivers: regionArchivers,
        Cameras: regionCameras,
        Controllers: regionControllers,
        Servers: regionServers,
    });

    return { summary, details: { Archivers: regionArchivers, Cameras: regionCameras, Controllers: regionControllers, Servers: regionServers } };
};

export { fetchGlobalData, fetchRegionData };







const baseUrl = "http://localhost:3000/api/regions";

document.addEventListener("DOMContentLoaded", () => {
    // Fetch summary for the default region (global)
    fetchSummary("global");

    // Add event listeners to region buttons
    const regionButtons = document.querySelectorAll(".region-button");
    regionButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
        });
    });

    // Close modal on button click
    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});

function fetchSummary(region) {
    const summaryUrl = `${baseUrl}/summary/${region}`;
    const detailsUrl = `${baseUrl}/details/${region}`;

    Promise.all([fetch(summaryUrl), fetch(detailsUrl)])
        .then((responses) => {
            if (!responses[0].ok || !responses[1].ok) {
                throw new Error("Error fetching data from API.");
            }
            return Promise.all(responses.map((res) => res.json()));
        })
        .then(([summary, details]) => {
            updateSummary(summary);
            updateDetails(details);
        })
        .catch((error) => {
            console.error("Error:", error);
            alert("Failed to load data. Please check the console for details.");
        });
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";
}

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    detailsContainer.innerHTML = "";

    data.details.forEach((device) => {
        const card = document.createElement("div");
        card.className = "device-card";

        card.innerHTML = `
            <h3>${device.name || "Unknown Device"}</h3>
            <p>IP: ${device.ip || "N/A"}</p>
            <p>Status: ${device.status || "Unknown"}</p>
            <button class="details-button" onclick="showModal('${device.name}', '${device.ip}', '${device.status}')">Details</button>
        `;

        detailsContainer.appendChild(card);
    });
}

function showModal(name, ip, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";
}





































