require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const http = require("http");
const { Server } = require("socket.io");
const regionRoutes = require("./routes/regionRoutes");
const { loadExcelData, pingDevices } = require("./services/excelService"); // Import data loading & ping function

const app = express();
const server = http.createServer(app);
const io = new Server(server, {
  cors: {
    origin: "http://127.0.0.1:5501",
    methods: ["GET", "POST"],
  },
});

const PORT = process.env.PORT || 80;

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5501",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Store device statuses
let deviceStatus = {};

// Load devices from Excel and start pinging
async function updateDeviceStatuses() {
  const allDevices = loadExcelData(); // Load all devices from Excel
  const devicesWithIP = [
    ...allDevices.cameras,
    ...allDevices.archivers,
    ...allDevices.controllers,
    ...allDevices.servers,
  ].filter(device => device.ip_address); // Filter devices with valid IPs

  deviceStatus = await pingDevices(devicesWithIP); // Ping devices and update status
  io.emit("deviceStatusUpdate", deviceStatus); // Send live update to clients
  console.log("Updated device statuses:", deviceStatus);
}

// Ping devices every 30 seconds
setInterval(updateDeviceStatuses, 30000);

// API to get real-time device statuses
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// WebSocket Connection for Live Updates
io.on("connection", (socket) => {
  console.log("A client connected");
  socket.emit("deviceStatusUpdate", deviceStatus); // Send initial data
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// Start Server
server.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  updateDeviceStatuses(); // Initial device status update
});













const baseUrl = "http://localhost:80/api/regions";
const socket = io("http://localhost:80"); // Connect to WebSocket server

document.addEventListener("DOMContentLoaded", () => {
    fetchSummary("global");
    fetchDetails("global");

    const regionButtons = document.querySelectorAll(".region-button");
    regionButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });

    // WebSocket listener for live updates
    socket.on("deviceStatusUpdate", (updatedStatus) => {
        console.log("Live update received:", updatedStatus);
        updateLiveStatus(updatedStatus);
    });
});

function fetchSummary(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;

    fetch(summaryUrl)
        .then(response => response.json())
        .then(summary => {
            console.log("Summary Data:", summary);
            updateSummary(summary);
        })
        .catch(error => {
            console.error("Error fetching summary:", error);
        });
}

function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then(response => response.json())
        .then(details => {
            console.log("Details Data:", details);
            updateDetails(details);
        })
        .catch(error => {
            console.error("Error fetching details:", error);
        });
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";
}

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    detailsContainer.innerHTML = "";

    const allDevices = [];

    for (const [key, devices] of Object.entries(data.details)) {
        if (!Array.isArray(devices) || devices.length === 0) continue;

        devices.forEach((device) => {
            const deviceIP = device.ip_address || "N/A";
            const currentStatus = device.status.toLowerCase();

            const card = document.createElement("div");
            card.className = "device-card";
            card.dataset.ip = deviceIP;
            card.dataset.status = currentStatus;

            const statusDot = document.createElement("span");
            statusDot.className = "status-dot";
            statusDot.style.backgroundColor = currentStatus === "online" ? "green" : "red";

            card.innerHTML = `
                <h3>${device.name || "Unknown Device"}</h3>
                <p>IP: ${deviceIP}</p>
                <p>Status: <span class="device-status">${currentStatus}</span> ${statusDot.outerHTML}</p>
                <button class="details-button" onclick="showModal('${device.name}', '${deviceIP}', '${currentStatus}')">Details</button>
            `;

            allDevices.push(card);
        });
    }

    allDevices.forEach((deviceCard) => {
        detailsContainer.appendChild(deviceCard);
    });
}

// **Update device status live using WebSockets**
function updateLiveStatus(updatedStatus) {
    document.querySelectorAll(".device-card").forEach((card) => {
        const ip = card.dataset.ip;
        if (updatedStatus[ip]) {
            const newStatus = updatedStatus[ip].toLowerCase();
            const statusDot = card.querySelector(".status-dot");
            const statusText = card.querySelector(".device-status");

            statusText.textContent = newStatus;
            card.dataset.status = newStatus;
            statusDot.style.backgroundColor = newStatus === "online" ? "green" : "red";
        }
    });
}

function showModal(name, ip, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";
}

