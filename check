const express = require("express");
const http = require("http");
const socketIo = require("socket.io");
const ping = require("ping");
const path = require("path");
const xlsx = require("xlsx");

const app = express();
const server = http.createServer(app);
const io = socketIo(server);

const PORT = 80;
let allDevices = []; // Array to store all devices
let deviceStatus = {}; // Object to store the device status

// Load data from Excel files (Archiver, Camera, Controller, Server)
function loadExcelData() {
  const filePaths = [
    path.join(__dirname, "data", "ArchiverData.xlsx"),
    path.join(__dirname, "data", "CameraData.xlsx"),
    path.join(__dirname, "data", "ControllerData.xlsx"),
    path.join(__dirname, "data", "ServerData.xlsx")
  ];

  let devices = [];

  filePaths.forEach((filePath) => {
    try {
      console.log(`Loading: ${filePath}`);
      const workbook = xlsx.readFile(filePath);
      const sheetName = workbook.SheetNames[0];
      const sheet = workbook.Sheets[sheetName];
      const rawData = xlsx.utils.sheet_to_json(sheet);

      const formattedData = rawData.map((row) => ({
        cameraname: row.cameraname || "Unknown",
        ip_address: row.Ip_address || row.ip_address || "N/A", // Handle both cases
        location: row.Location || "N/A",
      }));

      console.log(`✅ Loaded ${formattedData.length} devices from ${filePath}`);
      devices = devices.concat(formattedData);
    } catch (error) {
      console.error(`❌ Error loading ${filePath}:`, error.message);
    }
  });

  console.log("📌 Final Loaded Devices:", devices);
  return devices;
}

// Ping devices to check if they are online
async function pingDevices() {
  console.log("🔄 Pinging all devices...");

  let updatedStatus = {}; // Temporary object to store updated statuses

  for (const device of allDevices) {
    const ip = device.ip_address;  // Corrected the variable name here
    if (!ip) continue; // Skip if IP is missing

    try {
      const result = await ping.promise.probe(ip);
      updatedStatus[ip] = result.alive ? "Online" : "Offline";
      console.log(`Device ${ip} is ${updatedStatus[ip]}`); // Log device ping status
    } catch (error) {
      console.error(`Ping error for ${ip}:`, error.message);
      updatedStatus[ip] = "Offline";
    }
  }

  console.log("✅ Updated Device Status:", updatedStatus);

  // Emit device status update via WebSocket
  io.emit("deviceStatusUpdate", updatedStatus);
}

// Set a schedule to ping devices every 30 seconds, only once
let pingInterval = setInterval(pingDevices, 30000);

// Serve static files (HTML, JS, CSS) for the frontend
app.use(express.static(path.join(__dirname, "public")));

// WebSocket connection and event handling
io.on("connection", (socket) => {
  console.log("A user connected");

  // Send the initial device status to the new client
  socket.emit("deviceStatusUpdate", deviceStatus);

  socket.on("disconnect", () => {
    console.log("User disconnected");
  });
});

// API route to manually trigger ping (for testing purposes)
app.get("/api/ping/all", (req, res) => {
  console.log("Manual ping triggered");
  pingDevices(); // Manually trigger ping to update statuses
  res.send("Pinging devices...");
});

// Start the server
server.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
});

// Load initial data from Excel files
allDevices = loadExcelData();










