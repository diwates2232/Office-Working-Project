const http = require('http');
const express = require("express");
const socketIo = require("socket.io");
const cors = require("cors");
const bodyParser = require("body-parser");
const path = require("path");
const xlsx = require("xlsx");
const ping = require("ping");
require("dotenv").config();

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(cors({ origin: "http://127.0.0.1:5501", methods: "GET,POST,PUT,DELETE" }));
app.use(bodyParser.json());

// ✅ Load Excel Data
function loadExcelData() {
    const filePaths = [
        path.join(__dirname, "data", "ArchiverData.xlsx"),
        path.join(__dirname, "data", "CameraData.xlsx"),
        path.join(__dirname, "data", "ControllerData.xlsx"),
        path.join(__dirname, "data", "ServerData.xlsx")
    ];

    let devices = [];

    filePaths.forEach((filePath) => {
        try {
            console.log(`Loading: ${filePath}`);
            const workbook = xlsx.readFile(filePath);
            const sheetName = workbook.SheetNames[0];
            const sheet = workbook.Sheets[sheetName];
            const rawData = xlsx.utils.sheet_to_json(sheet);

            // Convert column names to lowercase for consistency
            const formattedData = rawData.map((row) => ({
                cameraname: row.cameraname || "Unknown",
                ip_address: row.Ip_address || row.ip_address || "N/A", // Handle both cases
                location: row.Location || "N/A",
            }));

            console.log(`✅ Loaded ${formattedData.length} devices from ${filePath}`);
            devices = devices.concat(formattedData);
        } catch (error) {
            console.error(`❌ Error loading ${filePath}:`, error.message);
        }
    });

    console.log("📌 Final Loaded Devices:", devices);
    return devices;
}

// ✅ Load all devices on startup
let allDevices = loadExcelData();
let deviceStatus = {};

// ✅ Function to Ping Devices and Update Status
async function pingDevices() {
    console.log("🔄 Pinging all devices...");
    
    for (const device of allDevices) {
        const ip = device.Ip_address;
        if (!ip) continue; // Skip if IP is missing

        try {
            const result = await ping.promise.probe(ip);
            deviceStatus[ip] = result.alive ? "Online" : "Offline";
        } catch (error) {
            console.error(`Ping error for ${ip}:`, error.message);
            deviceStatus[ip] = "Offline";
        }
    }

    console.log("✅ Updated Device Status:", deviceStatus);
}

// ✅ Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// ✅ API Route: Get live status of all devices
app.get("/api/devices/status", (req, res) => {
    res.json(deviceStatus);
});

// ✅ API Route: Ping a Specific Device
app.get("/api/ping/:ip", async (req, res) => {
    const ip = req.params.Ip_address;
    if (!ip) return res.status(400).json({ error: "IP address is required" });

    try {
        const result = await ping.promise.probe(ip);
        res.json({ ip, status: result.alive ? "Online" : "Offline" });
    } catch (error) {
        console.error(`Ping error for ${ip}:`, error.message);
        res.json({ ip, status: "Offline" });
    }
});

// ✅ API Route: Reload Excel Data (Manual Refresh)
app.get("/api/reload", (req, res) => {
    allDevices = loadExcelData();
    res.json({ message: "Excel data reloaded successfully!", devices: allDevices });
});

// ✅ Error Handling Middleware
app.use((err, req, res, next) => {
    console.error(err.stack);
    res.status(500).send("Something went wrong!");
});

// ✅ Create HTTP server and integrate with Socket.IO
const server = http.createServer(app);
const io = socketIo(server, {
    cors: {
        origin: "http://127.0.0.1:5501", // Allow only your frontend origin
        methods: ["GET", "POST"],
    }
});

// ✅ WebSocket Connection and Event Handling
io.on('connection', (socket) => {
    console.log('A user connected');
    
    // Emit updated device status every 30 seconds
    setInterval(() => {
        socket.emit('deviceStatusUpdate', deviceStatus);
    }, 30000);

    socket.on('disconnect', () => {
        console.log('User disconnected');
    });
});

// ✅ Start Server with Socket.IO
server.listen(PORT, () => {
    console.log(`🚀 Server running on http://localhost:${PORT}`);
    pingDevices(); // Start pinging devices immediately

});


<script src="https://cdn.socket.io/4.1.3/socket.io.min.js"></script>




















const baseUrl = "http://localhost:80/api/regions";
const socket = io("http://localhost:80"); // Connect to WebSocket server

document.addEventListener("DOMContentLoaded", () => {
    fetchSummary("global");
    fetchDetails("global");

    const regionButtons = document.querySelectorAll(".region-button");
    regionButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
        });
    });

    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });

    // WebSocket listener for live updates
    socket.on("deviceStatusUpdate", (updatedStatus) => {
        console.log("Live update received:", updatedStatus);
        updateLiveStatus(updatedStatus);
    });
});

function fetchSummary(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;

    fetch(summaryUrl)
        .then(response => response.json())
        .then(summary => {
            console.log("Summary Data:", summary);
            updateSummary(summary);
        })
        .catch(error => {
            console.error("Error fetching summary:", error);
        });
}

function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then(response => response.json())
        .then(details => {
            console.log("Details Data:", details);
            updateDetails(details);
        })
        .catch(error => {
            console.error("Error fetching details:", error);
        });
}

function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";
}

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    detailsContainer.innerHTML = "";

    const allDevices = [];

    for (const [key, devices] of Object.entries(data.details)) {
        if (!Array.isArray(devices) || devices.length === 0) continue;

        devices.forEach((device) => {
            const deviceIP = device.ip_address || "N/A";
            const currentStatus = device.status.toLowerCase();

            const card = document.createElement("div");
            card.className = "device-card";
            card.dataset.ip = deviceIP;
            card.dataset.status = currentStatus;

            const statusDot = document.createElement("span");
            statusDot.className = "status-dot";
            statusDot.style.backgroundColor = currentStatus === "online" ? "green" : "red";

            card.innerHTML = `
                <h3>${device.name || "Unknown Device"}</h3>
                <p>IP: ${deviceIP}</p>
                <p>Status: <span class="device-status">${currentStatus}</span> ${statusDot.outerHTML}</p>
                <button class="details-button" onclick="showModal('${device.name}', '${deviceIP}', '${currentStatus}')">Details</button>
            `;

            allDevices.push(card);
        });
    }

    allDevices.forEach((deviceCard) => {
        detailsContainer.appendChild(deviceCard);
    });
}

// **Update device status live using WebSockets**
function updateLiveStatus(updatedStatus) {
    document.querySelectorAll(".device-card").forEach((card) => {
        const ip = card.dataset.ip;
        if (updatedStatus[ip]) {
            const newStatus = updatedStatus[ip].toLowerCase();
            const statusDot = card.querySelector(".status-dot");
            const statusText = card.querySelector(".device-status");

            statusText.textContent = newStatus;
            card.dataset.status = newStatus;
            statusDot.style.backgroundColor = newStatus === "online" ? "green" : "red";
        }
    });
}

function showModal(name, ip, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";
}

