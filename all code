excelService .js

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};

// Function to compute global summary and details
const fetchAllIpAddress = () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    merged = [...devices.cameras , ...devices.archivers, ...devices.controllers, ...devices.servers]
    //console.log("Hi ", merged)
    addresses =  merged.map(myfunc)
    console.log(addresses)
    return addresses
    
}
const myfunc= (x) => {
    return x.ip_address
}

const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

const pLimit = require("p-limit");

const cache = new Map(); // Stores device status temporarily
const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchAllIpAddress };



regionController.js

const { fetchGlobalData, fetchRegionData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
};


regionRoutes.js

 //my code working 

 const express = require("express");
 const {
     getGlobalSummary,
     getGlobalDetails,
     getRegionSummary,
     getRegionDetails,
 } = require("../controllers/regionControllers");
 
 const router = express.Router();
 
 // Global Routes
 router.get("/summary/global", getGlobalSummary);
 router.get("/details/global", getGlobalDetails);
 
 // Region Routes
 router.get("/summary/:regionName", getRegionSummary);
 router.get("/details/:regionName", getRegionDetails);
 
 module.exports = router;






app.js



require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const regionRoutes = require("./routes/regionRoutes");
const ping = require("ping");
const net = require("net");
const { execSync } = require("child_process");
const { fetchAllIpAddress } = require("./services/excelService");

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5500",
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// Device status map: { ip: { status, failCount } }
let deviceStatus = new Map();

// Function to flush ARP cache (helps avoid false positives)
const flushArpCache = () => {
  try {
    const platform = process.platform;
    if (platform === "win32") {
      execSync("arp -d *");
    } else if (platform === "linux" || platform === "darwin") {
      execSync("sudo ip -s -s neigh flush all");
    }
    console.log("ARP cache flushed.");
  } catch (error) {
    console.error("Failed to flush ARP cache:", error);
  }
};

// Function to check TCP port
const checkTcpPort = (host, port = 80, timeout = 3000) => {
  return new Promise((resolve) => {
    const socket = new net.Socket();
    socket.setTimeout(timeout);

    socket.connect(port, host, () => {
      socket.destroy();
      resolve(true);
    });

    socket.on("error", () => {
      socket.destroy();
      resolve(false);
    });

    socket.on("timeout", () => {
      socket.destroy();
      resolve(false);
    });
  });
};

// Enhanced ping with larger payload
const pingWithLargePayload = async (ip, retries = 3, delay = 1000) => {
  let successCount = 0;
  for (let i = 0; i < retries; i++) {
    try {
      const result = await ping.promise.probe(ip, { extra: ["-s", "1024"] }); // 1024 bytes payload
      if (result.alive) successCount++;
      await new Promise((resolve) => setTimeout(resolve, delay));
    } catch (error) {
      console.error(`Ping error for ${ip}:`, error);
    }
  }
  return successCount === retries;
};

// Determine device status with stability checks
const checkDeviceStatus = async (ip) => {
  const pingAlive = await pingWithLargePayload(ip);
  const tcpAlive = pingAlive ? await checkTcpPort(ip) : false;
  return pingAlive && tcpAlive;
};

// Main device monitoring loop
const pingDevices = async () => {
  const devices = fetchAllIpAddress();
  flushArpCache(); // Flush ARP cache before pinging

  for (const ip of devices) {
    const isAlive = await checkDeviceStatus(ip);

    // Get current device status
    const current = deviceStatus.get(ip) || { status: "Unknown", failCount: 0 };

    if (isAlive) {
      // Reset fail count on successful response
      deviceStatus.set(ip, { status: "Online", failCount: 0 });
    } else {
      // Increment fail count for each failed attempt
      const failCount = current.failCount + 1;
      const newStatus = failCount >= 3 ? "Offline" : "Online"; // Mark offline only after 3 consecutive failures
      deviceStatus.set(ip, { status: newStatus, failCount });
    }
  }

  // Log the updated status
  const statusObject = Object.fromEntries(
    Array.from(deviceStatus.entries()).map(([ip, { status }]) => [ip, status])
  );
  console.log("Updated device status:", statusObject);
};

// Endpoint: Ping a single IP dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;

  try {
    const isAlive = await checkDeviceStatus(ip);
    res.json({ ip, status: isAlive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Endpoint: Retrieve all device statuses
app.get("/api/devices/status", (req, res) => {
  const statusObj = Object.fromEntries(
    Array.from(deviceStatus.entries()).map(([ip, { status }]) => [ip, status])
  );
  res.json(statusObj);
});

// Error handling
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Internal Server Error");
});

// Start the server
app.listen(PORT, () => {
  console.log(`Server running at http://localhost:${PORT}`);
  pingDevices(); // Initial device status check
  setInterval(pingDevices, 120000); // Repeat every 2 minutes
});





