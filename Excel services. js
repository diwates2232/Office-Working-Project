const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
8const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_'); // Replace spaces with underscores
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into memory
const loadExcelData = () => {
    // Read Excel files
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    // Convert sheets to JSON and normalize headers
    const archiverData = normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]]));
    const controllerData = normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]]));
    const cameraData = normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]]));
    const serverData = normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]]));

    // Store all data in memory
    allData = {
        archivers: archiverData,
        controllers: controllerData,
        cameras: cameraData,
        servers: serverData,
    };
};

// Function to fetch data by region name
const fetchRegionData = async (regionName) => {
    // Filter data for the requested region
    const regionArchivers = allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionControllers = allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionCameras = allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionServers = allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());

    // Ping devices to check their status
    const devices = [...regionArchivers, ...regionControllers, ...regionCameras, ...regionServers];
    await pingDevices(devices);

    return {
        archivers: regionArchivers,
        controllers: regionControllers,
        cameras: regionCameras,
        servers: regionServers,
    };
};

// Function to ping devices in parallel
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address; // Assuming IP address is stored under `ip_address`
        if (ipAddress) {
            device.status = await pingDevice(ipAddress);
        } else {
            device.status = "IP Address Missing";
        }
    });

    await Promise.all(pingPromises); // Parallelize all ping operations
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data when the server starts
loadExcelData();

module.exports = { fetchRegionData };




update 


const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_'); // Replace spaces with underscores
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into memory
const loadExcelData = () => {
    // Read Excel files
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    // Convert sheets to JSON and normalize headers
    const archiverData = normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]]));
    const controllerData = normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]]));
    const cameraData = normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]]));
    const serverData = normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]]));

    // Store all data in memory
    allData = {
        archivers: archiverData,
        controllers: controllerData,
        cameras: cameraData,
        servers: serverData,
    };
};

// Function to fetch data by region name
const fetchRegionData = async (regionName) => {
    // Filter data for the requested region
    const regionArchivers = allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionControllers = allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionCameras = allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionServers = allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase());

    // Ping devices to check their status
    const devices = [...regionArchivers, ...regionControllers, ...regionCameras, ...regionServers];
    await pingDevices(devices);

    return {
        archivers: regionArchivers,
        controllers: regionControllers,
        cameras: regionCameras,
        servers: regionServers,
    };
};

// Function to fetch global data
const fetchGlobalData = async () => {
    // Ensure all data is available in memory
    if (!allData.archivers || !allData.controllers || !allData.cameras || !allData.servers) {
        throw new Error("Data not loaded properly");
    }

    // Calculate total counts
    const totalArchivers = allData.archivers.length;
    const totalControllers = allData.controllers.length;
    const totalCameras = allData.cameras.length;
    const totalServers = allData.servers.length;

    return {
        totalArchivers,
        totalControllers,
        totalCameras,
        totalServers,
    };
};

// Function to ping devices in parallel
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address; // Assuming IP address is stored under `ip_address`
        if (ipAddress) {
            device.status = await pingDevice(ipAddress);
        } else {
            device.status = "IP Address Missing";
        }
    });

    await Promise.all(pingPromises); // Parallelize all ping operations
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data when the server starts
loadExcelData();

// Export all functions
module.exports = { fetchRegionData, fetchGlobalData };



//3

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into memory
const loadExcelData = () => {
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    const archiverData = normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]]));
    const controllerData = normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]]));
    const cameraData = normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]]));
    const serverData = normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]]));

    allData = {
        archivers: archiverData,
        controllers: controllerData,
        cameras: cameraData,
        servers: serverData,
    };
};

// Function to fetch global summary
const fetchGlobalData = async () => {
    const totalDevices = [...allData.archivers, ...allData.controllers, ...allData.cameras, ...allData.servers];
    await pingDevices(totalDevices);

    const onlineDevices = totalDevices.filter((device) => device.status === "Online").length;
    const offlineDevices = totalDevices.filter((device) => device.status === "Offline").length;

    return {
        total: totalDevices.length,
        online: onlineDevices,
        offline: offlineDevices,
    };
};

// Function to fetch region summary
const fetchRegionData = async (regionName) => {
    const regionArchivers = allData.archivers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionControllers = allData.controllers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionCameras = allData.cameras.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionServers = allData.servers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());

    const devices = [...regionArchivers, ...regionControllers, ...regionCameras, ...regionServers];
    await pingDevices(devices);

    const onlineDevices = devices.filter((device) => device.status === "Online").length;
    const offlineDevices = devices.filter((device) => device.status === "Offline").length;

    return {
        total: devices.length,
        online: onlineDevices,
        offline: offlineDevices,
    };
};

// Function to fetch region-wise details
const fetchRegionDetails = async (regionName) => {
    const regionArchivers = allData.archivers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionControllers = allData.controllers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionCameras = allData.cameras.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());
    const regionServers = allData.servers.filter((row) => row.location?.toLowerCase() === regionName.toLowerCase());

    const devices = [...regionArchivers, ...regionControllers, ...regionCameras, ...regionServers];
    await pingDevices(devices);

    return {
        archivers: regionArchivers,
        controllers: regionControllers,
        cameras: regionCameras,
        servers: regionServers,
    };
};

// Function to ping devices
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address;
        if (ipAddress) {
            device.status = await pingDevice(ipAddress);
        } else {
            device.status = "IP Address Missing";
        }
    });

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData, fetchRegionDetails };



4 new 


const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");

// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};

// Function to load Excel data into memory
const loadExcelData = () => {
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    allData = {
        archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
        controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
        cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
        servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
    };
};

// Function to compute global summary and details
const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};

// Function to ping devices in parallel
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address;
        device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
    });

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData };




imptovr time cinplexity


const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");
let cachedData = null; // Cache for data
let lastCacheUpdateTime = null;

const CACHE_EXPIRY_MS = 300000; // Cache expiry time (5 minutes)
const excelFilePath = path.join(__dirname, "../data/devices.xlsx");

// Load and process Excel data
const loadExcelData = async () => {
    try {
        const workbook = xlsx.readFile(excelFilePath);
        const sheetName = workbook.SheetNames[0];
        const data = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);
        return data;
    } catch (error) {
        console.error("Error loading Excel file:", error.message);
        throw new Error("Failed to load Excel data");
    }
};

// Ping devices in parallel
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address;
        device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
    });

    await Promise.all(pingPromises);
};

// Ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Process data to create summaries and details
const processDeviceData = async () => {
    const devices = await loadExcelData();
    await pingDevices(devices);

    const globalSummary = { totalDevices: 0, totalOnline: 0, totalOffline: 0 };
    const regionSummaries = {};
    const regionDetails = {};

    devices.forEach((device) => {
        const region = device.region || "Unknown";
        const status = device.status === "Online" ? "Online" : "Offline";

        // Update global summary
        globalSummary.totalDevices++;
        globalSummary[status === "Online" ? "totalOnline" : "totalOffline"]++;

        // Update region summaries
        if (!regionSummaries[region]) {
            regionSummaries[region] = { totalDevices: 0, totalOnline: 0, totalOffline: 0 };
        }
        regionSummaries[region].totalDevices++;
        regionSummaries[region][status === "Online" ? "totalOnline" : "totalOffline"]++;

        // Add to region details
        if (!regionDetails[region]) {
            regionDetails[region] = [];
        }
        regionDetails[region].push(device);
    });

    return { globalSummary, regionSummaries, regionDetails };
};

// Fetch cached data or reload if expired
const getCachedData = async () => {
    const now = Date.now();
    if (!cachedData || now - lastCacheUpdateTime > CACHE_EXPIRY_MS) {
        cachedData = await processDeviceData();
        lastCacheUpdateTime = now;
    }
    return cachedData;
};

const fetchGlobalData = async () => {
    const { globalSummary } = await getCachedData();
    return { summary: globalSummary };
};

const fetchRegionData = async (regionName) => {
    const { regionSummaries, regionDetails } = await getCachedData();
    return {
        summary: regionSummaries[regionName] || {},
        details: regionDetails[regionName] || [],
    };
};

module.exports = { fetchGlobalData, fetchRegionData };
