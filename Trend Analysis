const fs = require("fs");
const downtimeFile = "./src/data/downtimeLogs.json";
let downtimeLogs = {};

// Load existing downtime data when the server starts
if (fs.existsSync(downtimeFile)) {
  downtimeLogs = JSON.parse(fs.readFileSync(downtimeFile, "utf-8"));
}

// Function to log downtime
function logDowntime(ip, status) {
  const now = new Date().toISOString();
  
  if (status === "Offline") {
    // If the device just went offline, log the start time
    if (!downtimeLogs[ip] || downtimeLogs[ip].endTime) {
      downtimeLogs[ip] = { startTime: now, endTime: null };
    }
  } else {
    // If the device is back online, log the end time
    if (downtimeLogs[ip] && !downtimeLogs[ip].endTime) {
      downtimeLogs[ip].endTime = now;
    }
  }

  // Save the updated downtime log
  fs.writeFileSync(downtimeFile, JSON.stringify(downtimeLogs, null, 2));
}

// Updated function to continuously ping devices and track downtime
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";
      
      if (deviceStatus[ip] !== newStatus) {
        console.log(`[${new Date().toISOString()}] ${ip} changed status: ${newStatus}`);
        logDowntime(ip, newStatus);
      }

      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      logDowntime(ip, "Offline");
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", deviceStatus);
}
