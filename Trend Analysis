require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const ping = require("ping");
const xlsx = require("xlsx");

const app = express();
const PORT = process.env.PORT || 80;

// ✅ Fix: Correcting the data folder path
const dataFolder = path.join(__dirname, "data");

// ✅ Ensure the data folder exists before proceeding
if (!fs.existsSync(dataFolder)) {
  console.error(`❌ Error: Data folder not found at ${dataFolder}`);
  process.exit(1); // Stop the server if the folder is missing
}

// ✅ Define paths for all Excel files
const archiverFile = path.join(dataFolder, "ArchiverData.xlsx");
const cameraFile = path.join(dataFolder, "CameraData.xlsx");
const controllerFile = path.join(dataFolder, "ControllerData.xlsx");
const serverFile = path.join(dataFolder, "ServerData.xlsx");

// ✅ Ensure all required Excel files exist
const excelFiles = [archiverFile, cameraFile, controllerFile, serverFile];
excelFiles.forEach((file) => {
  if (!fs.existsSync(file)) {
    console.warn(`⚠️ Warning: ${path.basename(file)} not found.`);
  }
});

// ✅ Middleware
app.use(cors({ origin: "http://127.0.0.1:5501", methods: "GET,POST,PUT,DELETE" }));
app.use(bodyParser.json());

// ✅ Load device IPs from all Excel files
function loadDeviceIPs() {
  let devices = [];
  excelFiles.forEach((file) => {
    if (fs.existsSync(file)) {
      const workbook = xlsx.readFile(file);
      const sheetName = workbook.SheetNames[0]; // Read the first sheet
      const data = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);

      data.forEach((row) => {
        if (row.IP) {
          devices.push(row.IP.trim()); // Store IPs
        }
      });
    }
  });
  return devices;
}

const devices = loadDeviceIPs();
console.log(`✅ Monitoring ${devices.length} devices.`);

let deviceStatus = {};

// ✅ Load existing downtime logs
const downtimeFile = path.join(dataFolder, "downtimeLogs.json");
let downtimeLogs = fs.existsSync(downtimeFile) ? JSON.parse(fs.readFileSync(downtimeFile, "utf-8")) : {};

// ✅ Log downtime function
function logDowntime(ip, status) {
  const now = new Date().toISOString();

  if (status === "Offline") {
    if (!downtimeLogs[ip] || downtimeLogs[ip].endTime) {
      downtimeLogs[ip] = { startTime: now, endTime: null };
    }
  } else {
    if (downtimeLogs[ip] && !downtimeLogs[ip].endTime) {
      downtimeLogs[ip].endTime = now;
    }
  }

  fs.writeFileSync(downtimeFile, JSON.stringify(downtimeLogs, null, 2));
}

// ✅ Function to continuously ping devices
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";

      if (deviceStatus[ip] !== newStatus) {
        console.log(`[${new Date().toISOString()}] ${ip} changed status: ${newStatus}`);
        logDowntime(ip, newStatus);
      }

      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`❌ Error pinging ${ip}:`, error);
      logDowntime(ip, "Offline");
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("✅ Updated device status:", JSON.stringify(deviceStatus, null, 2));
}

// ✅ Start pinging every 30 seconds
setInterval(pingDevices, 30000);

// ✅ API to get real-time device status
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// ✅ API to get downtime logs
app.get("/api/devices/downtime", (req, res) => {
  res.json(downtimeLogs);
});

// ✅ API to ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;

  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`❌ Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// ✅ Error handling middleware
app.use((err, req, res, next) => {
  console.error("❌ Server error:", err.stack);
  res.status(500).send("Something went wrong!");
});

// ✅ Start the server
app.listen(PORT, () => {
  console.log(`🚀 Server running on http://localhost:${PORT}`);
  pingDevices(); // Start initial ping
});









require("dotenv").config();
const express = require("express");
const cors = require("cors");
const bodyParser = require("body-parser");
const fs = require("fs");
const path = require("path");
const ping = require("ping");
const regionRoutes = require("./routes/regionRoutes");

const app = express();
const PORT = process.env.PORT || 80;

// Middleware
app.use(
  cors({
    origin: "http://127.0.0.1:5501", // Match your frontend's origin
    methods: "GET,POST,PUT,DELETE",
    allowedHeaders: "Content-Type,Authorization",
  })
);
app.use(bodyParser.json());

// Routes
app.use("/api/regions", regionRoutes);

// File path for downtime logs
const downtimeFile = path.join(__dirname, "data", "downtimeLogs.json");
let downtimeLogs = {};

// Load existing downtime data when the server starts
if (fs.existsSync(downtimeFile)) {
  try {
    downtimeLogs = JSON.parse(fs.readFileSync(downtimeFile, "utf-8"));
  } catch (error) {
    console.error("Error reading downtime logs:", error);
    downtimeLogs = {};
  }
} else {
  fs.writeFileSync(downtimeFile, JSON.stringify({}, null, 2)); // Creates the file if missing
}

// Devices to monitor
const devices = ["10.58.118.20", "10.58.118.21", "10.199.22.61", "10.130.36.56", "10.64.10.50"];
let deviceStatus = {};

// Initialize all devices as "Unknown" until first ping
devices.forEach((ip) => (deviceStatus[ip] = "Unknown"));

// Function to log downtime
function logDowntime(ip, status) {
  const now = new Date().toISOString();
  
  if (status === "Offline") {
    // If the device just went offline, log the start time
    if (!downtimeLogs[ip] || downtimeLogs[ip].endTime) {
      downtimeLogs[ip] = { startTime: now, endTime: null };
    }
  } else {
    // If the device is back online, log the end time
    if (downtimeLogs[ip] && !downtimeLogs[ip].endTime) {
      downtimeLogs[ip].endTime = now;
    }
  }

  // Save the updated downtime log
  fs.writeFileSync(downtimeFile, JSON.stringify(downtimeLogs, null, 2));
}

// Function to continuously ping devices and track downtime
async function pingDevices() {
  for (const ip of devices) {
    try {
      const result = await ping.promise.probe(ip);
      const newStatus = result.alive ? "Online" : "Offline";
      
      // If status changes, log it
      if (deviceStatus[ip] !== newStatus) {
        console.log(`[${new Date().toISOString()}] ${ip} changed status: ${newStatus}`);
        logDowntime(ip, newStatus);
      }

      deviceStatus[ip] = newStatus;
    } catch (error) {
      console.error(`Error pinging ${ip}:`, error);
      logDowntime(ip, "Offline");
      deviceStatus[ip] = "Offline";
    }
  }
  console.log("Updated device status:", JSON.stringify(deviceStatus, null, 2));
}

// Ping devices every 30 seconds
setInterval(pingDevices, 30000);

// API to get real-time status of all devices
app.get("/api/devices/status", (req, res) => {
  res.json(deviceStatus);
});

// API to get downtime logs
app.get("/api/devices/downtime", (req, res) => {
  res.json(downtimeLogs);
});

// Ping a specific device dynamically
app.get("/api/ping/:ip", async (req, res) => {
  const ip = req.params.ip;
  
  try {
    const result = await ping.promise.probe(ip);
    res.json({ ip, status: result.alive ? "Online" : "Offline" });
  } catch (error) {
    console.error(`Ping error for ${ip}:`, error);
    res.json({ ip, status: "Offline" });
  }
});

// Error handling middleware
app.use((err, req, res, next) => {
  console.error(err.stack);
  res.status(500).send("Something went wrong!");
});

// Start Server
app.listen(PORT, () => {
  console.log(`Server running on http://localhost:${PORT}`);
  pingDevices(); // Start pinging devices immediately
});
