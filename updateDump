const express = require("express");
const {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
} = require("../controllers/regionControllers");

const router = express.Router();

// Global Routes
router.get("/api/regions/summary/global", getGlobalSummary);
router.get("/api/regions/details/global", getGlobalDetails);

// Region Routes
router.get("/api/regions/summary/:regionName", getRegionSummary);
router.get("/api/regions/details/:regionName", getRegionDetails);

module.exports = router;







const { fetchGlobalData, fetchRegionData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ success: true, summary: globalData.summary });
    } catch (error) {
        console.error("Error in getGlobalSummary:", error.message);
        res.status(500).json({ success: false, message: "Internal server error", error: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ success: true, details: globalData.details });
    } catch (error) {
        console.error("Error in getGlobalDetails:", error.message);
        res.status(500).json({ success: false, message: "Internal server error", error: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ success: true, summary: regionData.summary });
    } catch (error) {
        console.error(`Error in getRegionSummary for region ${regionName}:`, error.message);
        res.status(404).json({ success: false, message: `Region "${regionName}" not found`, error: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ success: true, details: regionData.details });
    } catch (error) {
        console.error(`Error in getRegionDetails for region ${regionName}:`, error.message);
        res.status(404).json({ success: false, message: `Region "${regionName}" not found`, error: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
};






const xlsx = require("xlsx");
const ping = require("ping");

let regionData = {}; // Store region-specific data
let globalData = {}; // Store global data

// Function to load Excel data
const loadExcelData = () => {
    try {
        const workbook = xlsx.readFile("./data.xlsx"); // Adjust path to match your file
        const sheetName = workbook.SheetNames[0];
        const sheetData = xlsx.utils.sheet_to_json(workbook.Sheets[sheetName]);

        sheetData.forEach((row) => {
            const regionName = row.Region;
            if (!regionData[regionName]) {
                regionData[regionName] = { details: [], summary: {} };
            }
            regionData[regionName].details.push({
                name: row.Name,
                ip_address: row.IP,
                status: "Unknown",
            });
        });

        // Ping devices for each region
        for (const regionName in regionData) {
            const devices = regionData[regionName].details;
            regionData[regionName].summary = generateSummary(devices);
        }

        // Generate global summary
        globalData = generateGlobalData();
        console.log("Regions loaded:", Object.keys(regionData)); // Debug log
    } catch (error) {
        console.error("Error loading Excel data:", error.message);
    }
};

// Function to fetch global data
const fetchGlobalData = async () => {
    await pingAllDevices(); // Update device statuses
    return globalData;
};

// Function to fetch region-specific data
const fetchRegionData = async (regionName) => {
    const region = regionData[regionName];
    if (!region) {
        throw new Error(`Region "${regionName}" not found. Available regions: ${Object.keys(regionData).join(", ")}`);
    }

    await pingDevices(region.details); // Update device statuses
    return region;
};

// Helper function to generate a summary for devices
const generateSummary = (devices) => {
    const summary = { total: devices.length, online: 0, offline: 0 };

    devices.forEach((device) => {
        if (device.status === "Online") {
            summary.online++;
        } else {
            summary.offline++;
        }
    });

    return summary;
};

// Helper function to generate global data
const generateGlobalData = () => {
    const globalSummary = { total: 0, online: 0, offline: 0 };
    const globalDetails = [];

    for (const region in regionData) {
        const { summary, details } = regionData[region];
        globalSummary.total += summary.total;
        globalSummary.online += summary.online;
        globalSummary.offline += summary.offline;
        globalDetails.push(...details);
    }

    return { summary: globalSummary, details: globalDetails };
};

// Ping all devices
const pingAllDevices = async () => {
    for (const regionName in regionData) {
        const devices = regionData[regionName].details;
        await pingDevices(devices);
    }
};

// Function to ping devices
const pingDevices = async (devices) => {
    const pingPromises = devices.map(async (device) => {
        const ipAddress = device.ip_address;
        device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
    });

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};

// Preload Excel data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData };





