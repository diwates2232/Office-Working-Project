const baseUrl = "http://localhost:80/api/regions";

document.addEventListener("DOMContentLoaded", () => {
    // Fetch summary and details for the default region (global)
    fetchSummary("global");
    fetchDetails("global");

    // Add event listeners to region buttons
    const regionButtons = document.querySelectorAll(".region-button");
    regionButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
        });
    });

    // Close modal on button click
    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});


let refreshInterval = 1000000; // 5 minutes (300,000 ms)
let countdownTime = refreshInterval / 1000; // Convert to seconds

function fetchData(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    Promise.all([
        fetch(summaryUrl).then((res) => res.json()),
        fetch(detailsUrl).then((res) => res.json())
    ])
    .then(([summary, details]) => {
        console.log("Summary Data:", summary);
        console.log("Details Data:", details);
        updateSummary(summary);
        updateDetails(details);
    })
    .catch((error) => {
        console.error("Error fetching data:", error);
    });
}

// Function to start auto-refresh with a countdown
function startAutoRefresh(regionName) {
    fetchData(regionName); // Fetch data initially

    // Countdown Timer Display
    const countdownDisplay = document.getElementById("countdown");
    function updateCountdown() {
        countdownDisplay.innerText = `Refreshing in ${countdownTime} seconds`;
        countdownTime--;
        if (countdownTime < 0) countdownTime = refreshInterval / 1000;
    }
    
    // Start countdown every second
    setInterval(updateCountdown, 1000);

    // Refresh data every 5 minutes
    setInterval(() => {
        fetchData(regionName); // Fetch fresh data
        countdownTime = refreshInterval / 1000; // Reset countdown
    }, refreshInterval);
}

// Call function with the selected region when the page loads
document.addEventListener("DOMContentLoaded", () => {
    let regionName = "Global"; // Default region
    startAutoRefresh(regionName);
});



function fetchSummary(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;

    fetch(summaryUrl)
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error fetching summary data from API.");
            }
            return response.json();
        })
        .then((summary) => {
            console.log("Summary Data:", summary);
            updateSummary(summary);
        })
        .catch((error) => {
            console.error("Error fetching summary:", error);
            alert("Failed to load summary data. Please check the console for details.");
        });
}

function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error fetching details data from API.");
            }
            return response.json();
        })
        .then((details) => {
            console.log("Details Data:", details);
            updateDetails(details);
        })
        .catch((error) => {
            console.error("Error fetching details:", error);
            const detailsContainer = document.getElementById("device-details");
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}


function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";

    // Update Cameras summary
    document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "N/A";
    document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "N/A";
    document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "N/A";

    // Update Archivers summary
    document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "N/A";
    document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "N/A";
    document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "N/A";

    // Update Controllers summary
    document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "N/A";
    document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "N/A";
    document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "N/A";

    // Update Servers summary
    document.getElementById("server-total").textContent = data.summary?.servers?.total || "N/A";
    document.getElementById("server-online").textContent = data.summary?.servers?.online || "N/A";
    document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "N/A";
}

function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    const deviceFilter = document.getElementById("device-filter");
    const onlineFilterButton = document.getElementById("filter-online");
    const offlineFilterButton = document.getElementById("filter-offline");
    const allFilterButton = document.getElementById("filter-all");

    detailsContainer.innerHTML = ""; // Clear old data

    const offlineDevices = [];
    const onlineDevices = [];
    
    // Store all devices
    let allDevices = [];

    // Loop through each device type
    for (const [key, devices] of Object.entries(data.details)) {
        if (!Array.isArray(devices) || devices.length === 0) continue;

        const deviceType = key.toLowerCase(); // Convert to lowercase for comparison

        devices.forEach((device) => {
            const card = document.createElement("div");
            card.className = "device-card";
            card.dataset.type = deviceType; // Store type for filtering
            card.dataset.status = device.status.toLowerCase(); // Store status for filtering

            // Create a status dot
            const statusDot = document.createElement("span");
            statusDot.className = "status-dot";
            statusDot.style.backgroundColor = device.status === "Online" ? "green" : "red";

            card.innerHTML = `
                <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                <p>DEVICE TYPE: ${deviceType.toUpperCase()}</p>
                <p>IP: ${device.ip_address || "N/A"}</p>
                <p>LOCATION: ${device.location || "N/A"}</p>
                <p>Status: ${device.status || "Unknown"} ${statusDot.outerHTML}</p>
                <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${device.ip_address || "N/A"}', '${device.location || "N/A"}', '${device.status || "Unknown"}')">Details</button>
            `;

            allDevices.push(card);
            if (device.status === "Online") {
                onlineDevices.push(card);
            } else {
                offlineDevices.push(card);
            }
        });
    }

    // Function to filter devices
    function filterDevices() {
        const selectedType = deviceFilter.value;
        const selectedStatus = document.querySelector(".status-filter.active")?.dataset.status || "all";

        detailsContainer.innerHTML = ""; // Clear current display

        const filteredDevices = allDevices.filter((device) =>
            (selectedType === "all" || device.dataset.type === selectedType) &&
            (selectedStatus === "all" || device.dataset.status === selectedStatus)
        );

        filteredDevices.forEach((deviceCard) => {
            detailsContainer.appendChild(deviceCard);
        });
    }

    // Initially display all devices
    filterDevices();

    // Add event listener to dropdown
    deviceFilter.addEventListener("change", filterDevices);

    // Add event listeners for status filters
    [allFilterButton, onlineFilterButton, offlineFilterButton].forEach((button) => {
        button.addEventListener("click", () => {
            document.querySelectorAll(".status-filter").forEach((btn) => btn.classList.remove("active"));
            button.classList.add("active");
            filterDevices();
        });
    });

    // Append offline devices first, followed by online devices
    [...offlineDevices, ...onlineDevices].forEach((deviceCard) => {
        detailsContainer.appendChild(deviceCard);
    });
}




function showModal(name, ip, location, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Location:</strong> ${location}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";
}

































const loadExcelData = () => {
    if (Object.keys(allData).length === 0) { // Load only if not already loaded
        const archiverWorkbook = xlsx.readFile(archiverPath);
        const controllerWorkbook = xlsx.readFile(controllerPath);
        const cameraWorkbook = xlsx.readFile(cameraPath);
        const serverWorkbook = xlsx.readFile(serverPath);

        allData = {
            archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
            controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
            cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
            servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
        };
        console.log("Excel Data Loaded.");
    }
};


const cache = new Map(); // Stores device status temporarily

const pingDevices = async (devices) => {
    const limit = pLimit(10); // Reduce concurrent ping requests to 10
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            if (cache.has(ipAddress)) {
                device.status = cache.get(ipAddress); // Use cached status
            } else {
                device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
                cache.set(ipAddress, device.status); // Store result in cache
            }
        })
    );

    await Promise.all(pingPromises);
};




function fetchData(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    Promise.all([
        fetch(summaryUrl).then((res) => res.json()),
        fetch(detailsUrl).then((res) => res.json())
    ])
    .then(([summary, details]) => {
        console.log("Summary Data:", summary);
        console.log("Details Data:", details);
        updateSummary(summary);
        updateDetails(details);
    })
    .catch((error) => {
        console.error("Error fetching data:", error);
    });
}



function updateDetails(data) {
    const detailsContainer = document.getElementById("device-details");
    detailsContainer.innerHTML = ""; // Clear old data

    const allDevices = [];

    Object.entries(data.details).forEach(([type, devices]) => {
        devices.forEach((device) => {
            const card = document.createElement("div");
            card.className = "device-card";
            card.dataset.type = type.toLowerCase();

            const statusDot = document.createElement("span");
            statusDot.className = "status-dot";
            statusDot.style.backgroundColor = device.status === "Online" ? "green" : "red";

            card.innerHTML = `
                <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                <p>DEVICE TYPE: ${type.toUpperCase()}</p>
                <p>IP: ${device.ip_address || "N/A"}</p>
                <p>LOCATION: ${device.location || "N/A"}</p>
                <p>Status: ${device.status || "Unknown"} ${statusDot.outerHTML}</p>
            `;

            allDevices.push(card);
        });
    });

    // Display first 50 devices and add "Load More" button
    const initialLoad = 50;
    allDevices.slice(0, initialLoad).forEach(card => detailsContainer.appendChild(card));

    if (allDevices.length > initialLoad) {
        const loadMoreBtn = document.createElement("button");
        loadMoreBtn.textContent = "Load More";
        loadMoreBtn.className = "load-more-btn";
        loadMoreBtn.addEventListener("click", () => {
            allDevices.slice(initialLoad).forEach(card => detailsContainer.appendChild(card));
            loadMoreBtn.remove(); // Remove button after loading all devices
        });
        detailsContainer.appendChild(loadMoreBtn);
    }
}








Script.js

const baseUrl = "http://localhost:80/api/regions";

document.addEventListener("DOMContentLoaded", () => {
    // Fetch summary and details for the default region (global)
    fetchSummary("global");
    fetchDetails("global");

    // Add event listeners to region buttons
    const regionButtons = document.querySelectorAll(".region-button");
    regionButtons.forEach((button) => {
        button.addEventListener("click", () => {
            const region = button.getAttribute("data-region");
            document.getElementById("region-title").textContent = `${region.toUpperCase()} Summary`;
            fetchSummary(region);
            fetchDetails(region);
        });
    });

    // Close modal on button click
    document.getElementById("close-modal").addEventListener("click", () => {
        document.getElementById("modal").style.display = "none";
    });
});



function fetchData(regionName) {
    const url = `${baseUrl}/${regionName}`;

    fetch(url)
        .then((response) => response.json())
        .then((data) => {
            console.log("Fetched Data:", data);
            updateSummary(data.summary);
            updateDetails(data.details);
        })
        .catch((error) => {
            console.error("Error fetching data:", error);
        });
}



function fetchSummary(regionName) {
    const summaryUrl = `${baseUrl}/summary/${regionName}`;

    fetch(summaryUrl)
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error fetching summary data from API.");
            }
            return response.json();
        })
        .then((summary) => {
            console.log("Summary Data:", summary);
            updateSummary(summary);
        })
        .catch((error) => {
            console.error("Error fetching summary:", error);
            alert("Failed to load summary data. Please check the console for details.");
        });
}

function fetchDetails(regionName) {
    const detailsUrl = `${baseUrl}/details/${regionName}`;

    fetch(detailsUrl)
        .then((response) => {
            if (!response.ok) {
                throw new Error("Error fetching details data from API.");
            }
            return response.json();
        })
        .then((details) => {
            console.log("Details Data:", details);
            updateDetails(details);
        })
        .catch((error) => {
            console.error("Error fetching details:", error);
            const detailsContainer = document.getElementById("device-details");
            detailsContainer.innerHTML = "<p>Failed to load device details.</p>";
        });
}


function updateSummary(data) {
    document.getElementById("total-devices").textContent = data.summary?.totalDevices || "N/A";
    document.getElementById("online-devices").textContent = data.summary?.totalOnlineDevices || "N/A";
    document.getElementById("offline-devices").textContent = data.summary?.totalOfflineDevices || "N/A";

    // Update Cameras summary
    document.getElementById("camera-total").textContent = data.summary?.cameras?.total || "N/A";
    document.getElementById("camera-online").textContent = data.summary?.cameras?.online || "N/A";
    document.getElementById("camera-offline").textContent = data.summary?.cameras?.offline || "N/A";

    // Update Archivers summary
    document.getElementById("archiver-total").textContent = data.summary?.archivers?.total || "N/A";
    document.getElementById("archiver-online").textContent = data.summary?.archivers?.online || "N/A";
    document.getElementById("archiver-offline").textContent = data.summary?.archivers?.offline || "N/A";

    // Update Controllers summary
    document.getElementById("controller-total").textContent = data.summary?.controllers?.total || "N/A";
    document.getElementById("controller-online").textContent = data.summary?.controllers?.online || "N/A";
    document.getElementById("controller-offline").textContent = data.summary?.controllers?.offline || "N/A";

    // Update Servers summary
    document.getElementById("server-total").textContent = data.summary?.servers?.total || "N/A";
    document.getElementById("server-online").textContent = data.summary?.servers?.online || "N/A";
    document.getElementById("server-offline").textContent = data.summary?.servers?.offline || "N/A";
}

    function updateDetails(data) {
        const detailsContainer = document.getElementById("device-details");
        const deviceFilter = document.getElementById("device-filter");
    
        detailsContainer.innerHTML = ""; // Clear old data
    
        const offlineDevices = [];
        const onlineDevices = [];
    
        // Store all devices
        let allDevices = [];
    
        // Loop through each device type
        for (const [key, devices] of Object.entries(data.details)) {
            if (!Array.isArray(devices) || devices.length === 0) continue;
    
            const deviceType = key.toLowerCase(); // Convert to lowercase for comparison
    
            devices.forEach((device) => {
                const card = document.createElement("div");
                card.className = "device-card";
                card.dataset.type = deviceType; // Store type for filtering
    
                // Create a status dot
                const statusDot = document.createElement("span");
                statusDot.className = "status-dot";
                statusDot.style.backgroundColor = device.status === "Online" ? "green" : "red";
    
                card.innerHTML = `
                    <h3>${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}</h3>
                    <p>DEVICE TYPE: ${deviceType.toUpperCase()}</p>
                    <p>IP: ${device.ip_address || "N/A"}</p>
                    <p>LOCATION: ${device.location || "N/A"}</p>
                    <p>Status: ${device.status || "Unknown"} ${statusDot.outerHTML}</p>
                    <button class="details-button" onclick="showModal('${device.cameraname || device.controllername || device.archivername || device.servername || "Unknown Device"}', '${device.ip_address || "N/A"}', '${device.location || "N/A"}', '${device.status || "Unknown"}')">Details</button>
                `;
    
                allDevices.push(card);
                if (device.status === "Online") {
                    onlineDevices.push(card);
                } else {
                    offlineDevices.push(card);
                }
            });
        }
    
        // Function to filter devices
        function filterDevices() {
            const selectedType = deviceFilter.value;
            detailsContainer.innerHTML = ""; // Clear current display
    
            const filteredDevices = allDevices.filter((device) =>
                selectedType === "all" || device.dataset.type === selectedType
            );
    
            filteredDevices.forEach((deviceCard) => {
                detailsContainer.appendChild(deviceCard);
            });
        }
    
        // Initially display all devices
        filterDevices();
    
        // Add event listener to dropdown
        deviceFilter.addEventListener("change", filterDevices);
    
    

    // Append offline devices first, followed by online devices
    [...offlineDevices, ...onlineDevices].forEach((deviceCard) => {
        detailsContainer.appendChild(deviceCard);
    });
}


function showModal(name, ip, location, status) {
    document.getElementById("modal-title").textContent = `Details for ${name}`;
    document.getElementById("modal-body").innerHTML = `
        <li><strong>Name:</strong> ${name}</li>
        <li><strong>IP:</strong> ${ip}</li>
        <li><strong>Location:</strong> ${location}</li>
        <li><strong>Status:</strong> ${status}</li>
    `;
    document.getElementById("modal").style.display = "block";
}





Backend 

Excelservice.js

const xlsx = require("xlsx");
const path = require("path");
const ping = require("ping");


// Paths for Excel files
const archiverPath = path.join(__dirname, "../data/ArchiverData.xlsx");
const controllerPath = path.join(__dirname, "../data/ControllerData.xlsx");
const cameraPath = path.join(__dirname, "../data/CameraData.xlsx");
const serverPath = path.join(__dirname, "../data/ServerData.xlsx");

// Cache to store preloaded data
let allData = {};

// Function to normalize column headers
const normalizeHeaders = (data) => {
    return data.map((row) => {
        const normalizedRow = {};
        for (const key in row) {
            const normalizedKey = key.trim().toLowerCase().replace(/\s+/g, '_');
            normalizedRow[normalizedKey] = row[key];
        }
        return normalizedRow;
    });
};
 //----------------------------------------------------------------------------------------
// Function to load Excel data into memory

const loadExcelData = () => {
    const archiverWorkbook = xlsx.readFile(archiverPath);
    const controllerWorkbook = xlsx.readFile(controllerPath);
    const cameraWorkbook = xlsx.readFile(cameraPath);
    const serverWorkbook = xlsx.readFile(serverPath);

    allData = {
        archivers: normalizeHeaders(xlsx.utils.sheet_to_json(archiverWorkbook.Sheets[archiverWorkbook.SheetNames[0]])),
        controllers: normalizeHeaders(xlsx.utils.sheet_to_json(controllerWorkbook.Sheets[controllerWorkbook.SheetNames[0]])),
        cameras: normalizeHeaders(xlsx.utils.sheet_to_json(cameraWorkbook.Sheets[cameraWorkbook.SheetNames[0]])),
        servers: normalizeHeaders(xlsx.utils.sheet_to_json(serverWorkbook.Sheets[serverWorkbook.SheetNames[0]])),
    };
};

// Function to compute global summary and details

const fetchGlobalData = async () => {
    const devices = {
        cameras: allData.cameras,
        archivers: allData.archivers,
        controllers: allData.controllers,
        servers: allData.servers,
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Function to compute region summary and details
const fetchRegionData = async (regionName) => {
    const devices = {
        cameras: allData.cameras.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        archivers: allData.archivers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        controllers: allData.controllers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
        servers: allData.servers.filter(row => row.location?.toLowerCase() === regionName.toLowerCase()),
    };

    // Ping all devices
    await pingDevices([...devices.cameras, ...devices.archivers, ...devices.controllers, ...devices.servers]);

    const summary = calculateSummary(devices);
    return { summary, details: devices };
};

// Helper function to calculate detailed summary
const calculateSummary = (devices) => {
    const summary = {};

    for (const [key, deviceList] of Object.entries(devices)) {
        const total = deviceList.length;
        const online = deviceList.filter(device => device.status === "Online").length;
        const offline = total - online;

        summary[key] = { total, online, offline };
    }

    return {
        totalDevices: Object.values(summary).reduce((sum, { total }) => sum + total, 0),
        totalOnlineDevices: Object.values(summary).reduce((sum, { online }) => sum + online, 0),
        totalOfflineDevices: Object.values(summary).reduce((sum, { offline }) => sum + offline, 0),
        ...summary,
    };
};


const pLimit = require("p-limit");

const pingDevices = async (devices) => {
    const limit = pLimit(20); // Limit to 10 concurrent pings
    const pingPromises = devices.map((device) =>
        limit(async () => {
            const ipAddress = device.ip_address;
            device.status = ipAddress ? await pingDevice(ipAddress) : "IP Address Missing";
        })
    );

    await Promise.all(pingPromises);
};

// Function to ping a single device
const pingDevice = (ip) => {
    return new Promise((resolve) => {
        ping.sys.probe(ip, (isAlive) => {
            resolve(isAlive ? "Online" : "Offline");
        });
    });
};


// Preload data
loadExcelData();

module.exports = { fetchGlobalData, fetchRegionData };







regionController.js


const { fetchGlobalData, fetchRegionData } = require("../services/excelService");

// Global Summary Controller
const getGlobalSummary = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ summary: globalData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Global Details Controller
const getGlobalDetails = async (req, res) => {
    try {
        const globalData = await fetchGlobalData();
        res.status(200).json({ details: globalData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Summary Controller
const getRegionSummary = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ summary: regionData.summary });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

// Region Details Controller
const getRegionDetails = async (req, res) => {
    const { regionName } = req.params;
    try {
        const regionData = await fetchRegionData(regionName);
        res.status(200).json({ details: regionData.details });
    } catch (error) {
        res.status(500).json({ error: "Internal server error", details: error.message });
    }
};

module.exports = {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
};








regionRoutes.js

const express = require("express");
const {
    getGlobalSummary,
    getGlobalDetails,
    getRegionSummary,
    getRegionDetails,
} = require("../controllers/regionControllers");

const router = express.Router();

// Global Routes
router.get("/summary/global", getGlobalSummary);
router.get("/details/global", getGlobalDetails);

// Region Routes
router.get("/summary/:regionName", getRegionSummary);
router.get("/details/:regionName", getRegionDetails);

module.exports = router;



